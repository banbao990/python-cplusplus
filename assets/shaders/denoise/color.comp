#version 430 core

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// ----------------------------------------------------------------------------
// uniforms
// ----------------------------------------------------------------------------
#define EPS 1e-6

layout(location = 0, binding = 0) uniform sampler2D img_input;
// layout(rgba32f, location = 0, binding = 0) uniform image2D img_input;
layout(rgba32f, location = 1, binding = 1) uniform image2D img_output;
layout(location = 2) uniform ivec4 v1;
layout(location = 3) uniform vec4 v2;

#define IMAGE_SIZE(D_IMG) textureSize(D_IMG, 0).xy
#define IMAGE_LOAD(D_IMG, D_TEX_COORD) texelFetch(D_IMG, D_TEX_COORD, 0).xyz
// #define IMAGE_LOAD(D_IMG, D_TEX_COORD) textureLod(D_IMG, (D_TEX_COORD)/vec2(IMAGE_SIZE(D_IMG)), 0.0).xyz

// #define IMAGE_SIZE(D_IMG) imageSize(D_IMG).xy
// #define IMAGE_LOAD(D_IMG, D_TEX_COORD) imageLoad(D_IMG, D_TEX_COORD).xyz

#define g_kernel_size v1.x
#define g_kernel_type v1.y
#define g_use_tonemapping v1.z

#define g_sigma v2.x

// ----------------------------------------------------------------------------
// functions
// ----------------------------------------------------------------------------

vec3 tonemap_aces(vec3 value) {
    float A = 2.51;
    float B = 0.03;
    float C = 2.43;
    float D = 0.59;
    float E = 0.14;
    value *= 0.6;
    value = clamp((value * (A * value + B)) / (value * (C * value + D) + E), 0.0, 1.0);
    value = pow(value, vec3(0.45454545));  // gamma 2.2
    return value;
}

bool outside(ivec2 coord, ivec2 image_size) {
    return coord.x < 0 || coord.x >= image_size.x || coord.y < 0 || coord.y >= image_size.y;
}

vec3 average_filter(ivec2 texel_coord) {
    const int kernel_size = g_kernel_size - 1;

    vec3 value = vec3(0.0, 0.0, 0.0);
    int count = 0;
    const ivec2 image_size = IMAGE_SIZE(img_input);
    for (int i = -kernel_size; i <= kernel_size; ++i) {
        for (int j = -kernel_size; j <= kernel_size; ++j) {
            ivec2 coord = texel_coord + ivec2(i, j);
            if (outside(coord, image_size)) {
                continue;
            }
            value += IMAGE_LOAD(img_input, coord);
            ++count;
        }
    }
    return value / float(count);
}

vec3 gaussian_filter(ivec2 texel_coord) {
    // 2 sigma: 0.9544
    const int kernel_size = int(ceil(g_sigma * 2.0));
    const float div = max(2.0 * g_sigma * g_sigma, EPS);
    const ivec2 image_size = IMAGE_SIZE(img_input);

    vec3 value = vec3(0.0, 0.0, 0.0);
    float weight_sum = 0.0;
    for (int i = -kernel_size; i <= kernel_size; ++i) {
        for (int j = -kernel_size; j <= kernel_size; ++j) {
            ivec2 coord = texel_coord + ivec2(i, j);
            if (outside(coord, image_size)) {
                continue;
            }
            float weight = exp(-(float(i * i + j * j)) / div);
            value += IMAGE_LOAD(img_input, texel_coord + ivec2(i, j)) * weight;
            weight_sum += weight;
        }
    }
    return value / weight_sum;
}

vec3 median_filter(ivec2 texel_coord) {
    const int kernel_size = g_kernel_size - 1;
    const ivec2 image_size = IMAGE_SIZE(img_input);

    vec3 value = vec3(0.0, 0.0, 0.0);
    int count = 0;
    // !!!!pack index into metric!!!!
    const int IDX_MAX = 128;
    const int METRIC_MIN = 1024;
    float metric[81];
    int idx = -1;
    for (int i = -kernel_size; i <= kernel_size; ++i) {
        for (int j = -kernel_size; j <= kernel_size; ++j) {
            ivec2 coord = texel_coord + ivec2(i, j);
            idx++;
            if (outside(coord, image_size)) {
                continue;
            }
            vec3 v = IMAGE_LOAD(img_input, coord);
            // dot metric
            float m = dot(v, v);
            // know that idx < 81 < 128
            metric[count] = floor(m * METRIC_MIN) * IDX_MAX + idx;
            ++count;
        }
    }

    // simple use the bubble sort
    for (int i = count - 1; i > 0; --i) {
        for (int j = 0; j < i; ++j) {
            if (metric[j] > metric[j + 1]) {
                float tmp = metric[j];
                metric[j] = metric[j + 1];
                metric[j + 1] = tmp;
            }
        }
    }

    int median_idx = int(metric[count / 2]) % IDX_MAX;
    ivec2 median_coord = texel_coord + ivec2(median_idx / (kernel_size * 2 + 1) - kernel_size, median_idx % (kernel_size * 2 + 1) - kernel_size);
    value = IMAGE_LOAD(img_input, median_coord);
    return value;
}

void main() {
    ivec2 texel_coord = ivec2(gl_GlobalInvocationID.xy);
    vec3 value = vec3(0.0, 0.0, 0.0);
    // Kernel
    {
        // Average
        if (g_kernel_type == 1) {
            value = average_filter(texel_coord);
        }
        // Gaussian
        else if (g_kernel_type == 2) {
            value = gaussian_filter(texel_coord);
        }
        // Median
        else if (g_kernel_type == 3) {
            value = median_filter(texel_coord);
        }
        // None
        else {
            // g_kernel_type == 0
            value = IMAGE_LOAD(img_input, texel_coord);
        }
    }

    // Tone Mapping
    if (g_use_tonemapping == 1) {
        value = tonemap_aces(value);
    }
    imageStore(img_output, texel_coord, vec4(value, 1.0));
}