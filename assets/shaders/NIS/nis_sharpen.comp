#version 450
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0, std140) uniform const_buffer
{
    float kDetectRatio;
    float kDetectThres;
    float kMinContrastRatio;
    float kRatioNorm;
    float kContrastBoost;
    float kEps;
    float kSharpStartY;
    float kSharpScaleY;
    float kSharpStrengthMin;
    float kSharpStrengthScale;
    float kSharpLimitMin;
    float kSharpLimitScale;
    float kScaleX;
    float kScaleY;
    float kDstNormX;
    float kDstNormY;
    float kSrcNormX;
    float kSrcNormY;
    uint kInputViewportOriginX;
    uint kInputViewportOriginY;
    uint kInputViewportWidth;
    uint kInputViewportHeight;
    uint kOutputViewportOriginX;
    uint kOutputViewportOriginY;
    uint kOutputViewportWidth;
    uint kOutputViewportHeight;
    float reserved0;
    float reserved1;
} _287;

layout(binding = 3) uniform writeonly image2D out_texture;
uniform sampler2D SPIRV_Cross_Combinedin_texturesamplerLinearClamp;

shared float shPixelsY[30][38];

vec3 tonemap_aces(vec3 value) {
    float A = 2.51;
    float B = 0.03;
    float C = 2.43;
    float D = 0.59;
    float E = 0.14;
    value *= 0.6;
    value = clamp((value * (A * value + B)) / (value * (C * value + D) + E), 0.0, 1.0);
    value = pow(value, vec3(0.45454545));  // gamma 2.2
    return value;
}
float getY(vec3 rgba)
{
    return ((0.2125999927520751953125 * rgba.x) + (0.715200006961822509765625 * rgba.y)) + (0.072200000286102294921875 * rgba.z);
}

float CalcLTIFast(float y[5])
{
    float a_min = min(min(y[0], y[1]), y[2]);
    float a_max = max(max(y[0], y[1]), y[2]);
    float b_min = min(min(y[2], y[3]), y[4]);
    float b_max = max(max(y[2], y[3]), y[4]);
    float a_cont = a_max - a_min;
    float b_cont = b_max - b_min;
    float cont_ratio = max(a_cont, b_cont) / (min(a_cont, b_cont) + _287.kEps);
    return (1.0 - clamp((cont_ratio - _287.kMinContrastRatio) * _287.kRatioNorm, 0.0, 1.0)) * _287.kContrastBoost;
}

float EvalUSM(float pxl[5], float sharpnessStrength, float sharpnessLimit)
{
    float y_usm = (((-0.600099980831146240234375) * pxl[1]) + (1.20019996166229248046875 * pxl[2])) - (0.600099980831146240234375 * pxl[3]);
    y_usm *= sharpnessStrength;
    y_usm = min(sharpnessLimit, max(-sharpnessLimit, y_usm));
    y_usm *= CalcLTIFast(pxl);
    return y_usm;
}

vec4 GetDirUSM(float p[5][5])
{
    float scaleY = 1.0 - clamp((p[2][2] - _287.kSharpStartY) * _287.kSharpScaleY, 0.0, 1.0);
    float sharpnessStrength = (scaleY * _287.kSharpStrengthScale) + _287.kSharpStrengthMin;
    float sharpnessLimit = ((scaleY * _287.kSharpLimitScale) + _287.kSharpLimitMin) * p[2][2];
    float interp0Deg[5];
    for (int i = 0; i < 5; i++)
    {
        float indexable[5][5] = p;
        interp0Deg[i] = indexable[i][2];
    }
    vec4 rval;
    rval.x = EvalUSM(interp0Deg, sharpnessStrength, sharpnessLimit);
    float interp90Deg[5];
    for (int i_1 = 0; i_1 < 5; i_1++)
    {
        float indexable_1[5][5] = p;
        interp90Deg[i_1] = indexable_1[2][i_1];
    }
    rval.y = EvalUSM(interp90Deg, sharpnessStrength, sharpnessLimit);
    float interp45Deg[5];
    interp45Deg[0] = p[1][1];
    interp45Deg[1] = mix(p[2][1], p[1][2], 0.5);
    interp45Deg[2] = p[2][2];
    interp45Deg[3] = mix(p[3][2], p[2][3], 0.5);
    interp45Deg[4] = p[3][3];
    rval.z = EvalUSM(interp45Deg, sharpnessStrength, sharpnessLimit);
    float interp135Deg[5];
    interp135Deg[0] = p[3][1];
    interp135Deg[1] = mix(p[3][2], p[2][1], 0.5);
    interp135Deg[2] = p[2][2];
    interp135Deg[3] = mix(p[2][3], p[1][2], 0.5);
    interp135Deg[4] = p[1][3];
    rval.w = EvalUSM(interp135Deg, sharpnessStrength, sharpnessLimit);
    return rval;
}

vec4 GetEdgeMap(float p[5][5], int i, int j)
{
    float g_0 = abs(((((p[0 + i][0 + j] + p[0 + i][1 + j]) + p[0 + i][2 + j]) - p[2 + i][0 + j]) - p[2 + i][1 + j]) - p[2 + i][2 + j]);
    float g_45 = abs(((((p[1 + i][0 + j] + p[0 + i][0 + j]) + p[0 + i][1 + j]) - p[2 + i][1 + j]) - p[2 + i][2 + j]) - p[1 + i][2 + j]);
    float g_90 = abs(((((p[0 + i][0 + j] + p[1 + i][0 + j]) + p[2 + i][0 + j]) - p[0 + i][2 + j]) - p[1 + i][2 + j]) - p[2 + i][2 + j]);
    float g_135 = abs(((((p[1 + i][0 + j] + p[2 + i][0 + j]) + p[2 + i][1 + j]) - p[0 + i][1 + j]) - p[0 + i][2 + j]) - p[1 + i][2 + j]);
    float g_0_90_max = max(g_0, g_90);
    float g_0_90_min = min(g_0, g_90);
    float g_45_135_max = max(g_45, g_135);
    float g_45_135_min = min(g_45, g_135);
    float e_0_90 = 0.0;
    float e_45_135 = 0.0;
    if ((g_0_90_max + g_45_135_max) == 0.0)
    {
        return vec4(0.0);
    }
    e_0_90 = min(g_0_90_max / (g_0_90_max + g_45_135_max), 1.0);
    e_45_135 = 1.0 - e_0_90;
    bool _292 = g_0_90_max > (g_0_90_min * _287.kDetectRatio);
    bool _299;
    if (_292)
    {
        _299 = g_0_90_max > _287.kDetectThres;
    }
    else
    {
        _299 = _292;
    }
    bool c_0_90 = _299 && (g_0_90_max > g_45_135_min);
    bool _310 = g_45_135_max > (g_45_135_min * _287.kDetectRatio);
    bool _317;
    if (_310)
    {
        _317 = g_45_135_max > _287.kDetectThres;
    }
    else
    {
        _317 = _310;
    }
    bool c_45_135 = _317 && (g_45_135_max > g_0_90_min);
    bool c_g_0_90 = g_0_90_max == g_0;
    bool c_g_45_135 = g_45_135_max == g_45;
    float f_e_0_90 = (c_0_90 && c_45_135) ? e_0_90 : 1.0;
    float f_e_45_135 = (c_0_90 && c_45_135) ? e_45_135 : 1.0;
    float weight_0 = (c_0_90 && c_g_0_90) ? f_e_0_90 : 0.0;
    float weight_90 = (c_0_90 && (!c_g_0_90)) ? f_e_0_90 : 0.0;
    float weight_45 = (c_45_135 && c_g_45_135) ? f_e_45_135 : 0.0;
    float weight_135 = (c_45_135 && (!c_g_45_135)) ? f_e_45_135 : 0.0;
    return vec4(weight_0, weight_90, weight_45, weight_135);
}

void NVSharpen(uvec2 blockIdx, uint threadIdx)
{
    int dstBlockX = int(32u * blockIdx.x);
    int dstBlockY = int(24u * blockIdx.y);
    int _600 = int(threadIdx) * 2;
    for (int i = _600; i < 570; i += 256)
    {
        uvec2 pos = uvec2(uint(i) % 38u, (uint(i) / 38u) * 2u);
        for (int dy = 0; dy < 2; dy++)
        {
            for (int dx = 0; dx < 2; dx++)
            {
                float tx = (float((uint(dstBlockX) + pos.x) + uint(dx)) + (-1.5)) * _287.kSrcNormX;
                float ty = (float((uint(dstBlockY) + pos.y) + uint(dy)) + (-1.5)) * _287.kSrcNormY;
                vec4 px = textureLod(SPIRV_Cross_Combinedin_texturesamplerLinearClamp, vec2(tx, ty), 0.0);
                vec3 param = px.xyz;
                shPixelsY[pos.y + uint(dy)][pos.x + uint(dx)] = getY(param);
            }
        }
    }
    groupMemoryBarrier();
    barrier();
    int _714 = int(threadIdx);
    float p[5][5];
    for (int k = _714; k < 768; k += 128)
    {
        ivec2 pos_1 = ivec2(int(uint(k) % 32u), int(uint(k) / 32u));
        for (int i_1 = 0; i_1 < 5; i_1++)
        {
            for (int j = 0; j < 5; j++)
            {
                p[i_1][j] = shPixelsY[pos_1.y + i_1][pos_1.x + j];
            }
        }
        vec4 dirUSM = GetDirUSM(p);
        float param_1[5][5] = p;
        int param_2 = 1;
        int param_3 = 1;
        vec4 w = GetEdgeMap(param_1, param_2, param_3);
        float usmY = (((dirUSM.x * w.x) + (dirUSM.y * w.y)) + (dirUSM.z * w.z)) + (dirUSM.w * w.w);
        int dstX = dstBlockX + pos_1.x;
        int dstY = dstBlockY + pos_1.y;
        vec2 coord = vec2((float(dstX) + 0.5) * _287.kSrcNormX, (float(dstY) + 0.5) * _287.kSrcNormY);
        vec2 dstCoord = vec2(float(dstX), float(dstY));
        vec4 op = textureLod(SPIRV_Cross_Combinedin_texturesamplerLinearClamp, coord, 0.0);
        op.x += usmY;
        op.y += usmY;
        op.z += usmY;
if(_287.reserved0 > 0.5) { op.xyz = tonemap_aces(op.xyz); }
        imageStore(out_texture, ivec2(dstCoord), op);
    }
}

void main()
{
    uvec2 param = gl_WorkGroupID.xy;
    uint param_1 = gl_LocalInvocationID.x;
    NVSharpen(param, param_1);
}

