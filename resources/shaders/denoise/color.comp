#version 430 core

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// ----------------------------------------------------------------------------
//
// uniforms
//
// ----------------------------------------------------------------------------

layout(rgba32f, binding = 0) uniform image2D img_input;
// layout(rgba32f, location = 1) uniform image2D img_output;
#define img_output img_input

layout(location = 0) uniform ivec4 v1;

#define g_kernel_size v1.x
#define g_kernel_type v1.y
#define g_use_tonemapping v1.z

// ----------------------------------------------------------------------------
//
// functions
//
// ----------------------------------------------------------------------------

vec3 tonemap_aces(vec3 value) {
    float A = 2.51;
    float B = 0.03;
    float C = 2.43;
    float D = 0.59;
    float E = 0.14;
    value *= 0.6;
    value = clamp((value * (A * value + B)) / (value * (C * value + D) + E), 0.0, 1.0);
    value = pow(value, vec3(0.45454545));  // gamma 2.2
    return value;
}

void main() {
    ivec2 texel_coord = ivec2(gl_GlobalInvocationID.xy);
    vec3 value = vec3(0.0, 0.0, 0.0);
    // None
    if (g_kernel_type == 0) {
        value = imageLoad(img_input, texel_coord).xyz;
    }
    // Average
    else if (g_kernel_type == 1) {
        int kernel_size = g_kernel_size - 1;
        for (int i = -kernel_size; i <= kernel_size; ++i) {
            for (int j = -kernel_size; j <= kernel_size; ++j) {
                value += imageLoad(img_input, texel_coord + ivec2(i, j)).xyz;
            }
        }
        int samples = (2 * kernel_size + 1);
        samples *= samples;
        value /= samples;
    }

    // Tone Mapping
    if (g_use_tonemapping == 1) {
        value = tonemap_aces(value);
    }
    imageStore(img_output, texel_coord, vec4(value, 1.0));
}